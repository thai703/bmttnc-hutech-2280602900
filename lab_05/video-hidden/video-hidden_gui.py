import cv2
import numpy as np
import tkinter as tk
from tkinter import filedialog, messagebox

output_path = "encoded_video.avi"
video_path = ""

# H√†m chuy·ªÉn vƒÉn b·∫£n sang nh·ªã ph√¢n
def text_to_bin(text):
    return ''.join(format(ord(c), '08b') for c in text) + '1111111111111110'  # d·∫•u k·∫øt th√∫c

# H√†m chuy·ªÉn nh·ªã ph√¢n v·ªÅ vƒÉn b·∫£n
def bin_to_text(binary):
    chars = [binary[i:i+8] for i in range(0, len(binary), 8)]
    message = ''
    for c in chars:
        if c == '11111110':  # k·∫øt th√∫c
            break
        message += chr(int(c, 2))
    return message

# M√£ h√≥a video
def encode_video(video_path, message, output_path="encoded_video.avi"):
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ m·ªü video.")
        return

    width = int(cap.get(3))
    height = int(cap.get(4))
    fps = cap.get(cv2.CAP_PROP_FPS)
    fourcc = cv2.VideoWriter_fourcc(*'XVID')
    out = cv2.VideoWriter(output_path, fourcc, fps, (width, height))

    binary_message = text_to_bin(message)
    data_index = 0

    while True:
        ret, frame = cap.read()
        if not ret:
            break

        if data_index < len(binary_message):
            for row in range(frame.shape[0]):
                for col in range(frame.shape[1]):
                    for channel in range(3):  # BGR
                        if data_index < len(binary_message):
                            frame[row][col][channel] = np.uint8(
                                (frame[row][col][channel] & 0b11111110) | int(binary_message[data_index])
                            )
                            data_index += 1
        out.write(frame)

    cap.release()
    out.release()
    messagebox.showinfo("Th√†nh c√¥ng", f"‚úÖ ƒê√£ m√£ h√≥a v√† l∆∞u video:\n{output_path}")

# Gi·∫£i m√£ video
def decode_video(video_path):
    cap = cv2.VideoCapture(video_path)
    if not cap.isOpened():
        messagebox.showerror("L·ªói", "Kh√¥ng th·ªÉ m·ªü video.")
        return

    binary_data = ""
    while True:
        ret, frame = cap.read()
        if not ret:
            break

        for row in range(frame.shape[0]):
            for col in range(frame.shape[1]):
                for channel in range(3):  # BGR
                    binary_data += str(frame[row][col][channel] & 1)
                    if binary_data.endswith('11111110'):
                        cap.release()
                        message = bin_to_text(binary_data)
                        messagebox.showinfo("üîì Tin nh·∫Øn ƒë√£ gi·∫£i m√£", message)
                        return
    cap.release()
    messagebox.showwarning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y th√¥ng ƒëi·ªáp", "Kh√¥ng t√¨m th·∫•y k·∫øt th√∫c h·ª£p l·ªá.")

# Giao di·ªán UI
def select_video_encode():
    global video_path
    video_path = filedialog.askopenfilename(title="Ch·ªçn video ƒë·ªÉ m√£ h√≥a", filetypes=[("Video files", "*.avi *.mp4")])
    label_video_path.config(text=f"Video ƒë√£ ch·ªçn: {video_path}")

def select_output_path():
    global output_path
    output_path = filedialog.asksaveasfilename(defaultextension=".avi", filetypes=[("AVI files", "*.avi")])
    label_output_path.config(text=f"L∆∞u th√†nh: {output_path}")

def run_encode():
    if not video_path or not message_entry.get():
        messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng ch·ªçn video v√† nh·∫≠p tin nh·∫Øn.")
        return
    encode_video(video_path, message_entry.get(), output_path)

def run_decode():
    video_to_decode = filedialog.askopenfilename(title="Ch·ªçn video ƒë·ªÉ gi·∫£i m√£", filetypes=[("Video files", "*.avi *.mp4")])
    if video_to_decode:
        decode_video(video_to_decode)

# UI ch√≠nh
root = tk.Tk()
root.title("üì¶ Video Steganography")
root.geometry("500x350")
root.resizable(False, False)

tk.Label(root, text="üìº Gi·∫•u tin nh·∫Øn v√†o video", font=("Arial", 16, "bold")).pack(pady=10)

tk.Button(root, text="üóÇ Ch·ªçn video", command=select_video_encode).pack()
label_video_path = tk.Label(root, text="Video ƒë√£ ch·ªçn: (ch∆∞a ch·ªçn)", fg="blue")
label_video_path.pack()

tk.Label(root, text="üí¨ Nh·∫≠p tin nh·∫Øn c·∫ßn gi·∫•u:").pack(pady=5)
message_entry = tk.Entry(root, width=50)
message_entry.pack()

tk.Button(root, text="üíæ Ch·ªçn n∆°i l∆∞u video", command=select_output_path).pack(pady=5)
label_output_path = tk.Label(root, text="L∆∞u th√†nh: encoded_video.avi (m·∫∑c ƒë·ªãnh)", fg="green")
label_output_path.pack()

tk.Button(root, text="üöÄ M√£ h√≥a", bg="lightgreen", command=run_encode).pack(pady=10)

tk.Label(root, text="-----------------------").pack(pady=5)

tk.Button(root, text="üîç Gi·∫£i m√£ t·ª´ video", bg="lightblue", command=run_decode).pack(pady=5)

root.mainloop()
